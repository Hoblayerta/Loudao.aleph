# üü£ LouDao MVP ‚Äî Implementaci√≥n H√≠brida Real (Claude Code)

**Objetivo:** Plataforma de denuncias de violencia de g√©nero con **tendedero p√∫blico** + **an√°lisis privado inteligente** usando **Zama FHE en Lisk Sepolia**.

**Modelo:** Datos p√∫blicos visibles (agresor, instituci√≥n) + Datos privados cifrados (edad, relaci√≥n, urgencia) para an√°lisis sin revelar informaci√≥n sensible.

---

## 1Ô∏è‚É£ Arquitectura H√≠brida

**Frontend (React + fhevmjs)**
- Formulario: datos p√∫blicos + datos privados cifrados paleta de colores: 6b02a7 morado, Bf0398 rosa,  & 02a412 verde
- Logo de la app : /home/scarf/hackatones/LouDao-MVP/client/public/logo.jpg
- Tendedero p√∫blico: TODAS las denuncias visibles
- Analytics privados: estad√≠sticas sin revelar datos individuales  
- Pattern matching: "Este agresor tiene X denuncias m√°s"
- Directorio de apoyo con recomendaciones inteligentes
- Conexi√≥n a Lisk Sepolia RPC

**Smart Contracts (Hardhat + Zama FHEVM)**
- `LouDaoHybrid.sol`: datos p√∫blicos + an√°lisis FHE privado
- Funciones FHE: estad√≠sticas demogr√°ficas, pattern matching, validaci√≥n comunitaria
- IDs √∫nicos seguros sin servicios externos

**Blockchain**
- Lisk Sepolia: Base EVM-compatible
- Zama FHEVM: Coprocessor para an√°lisis privado
- Modelo h√≠brido: transparencia + privacidad inteligente

---

## 2Ô∏è‚É£ Estructura de carpetas

```
/LouDao-Hybrid-MVP
‚îÇ
‚îú‚îÄ contracts/
‚îÇ    ‚îú‚îÄ LouDaoHybrid.sol
‚îÇ    ‚îî‚îÄ SupportDirectory.sol
‚îÇ
‚îú‚îÄ scripts/
‚îÇ    ‚îú‚îÄ deployHybrid.js
‚îÇ    ‚îî‚îÄ deploySupport.js
‚îÇ
‚îú‚îÄ test/
‚îÇ    ‚îú‚îÄ LouDaoHybrid.test.js
‚îÇ    ‚îî‚îÄ integration.test.js
‚îÇ
‚îú‚îÄ frontend/
‚îÇ    ‚îú‚îÄ src/
‚îÇ    ‚îÇ   ‚îú‚îÄ components/
‚îÇ    ‚îÇ   ‚îÇ   ‚îú‚îÄ ReportForm.js
‚îÇ    ‚îÇ   ‚îÇ   ‚îú‚îÄ PublicTendedero.js
‚îÇ    ‚îÇ   ‚îÇ   ‚îú‚îÄ PrivateAnalytics.js
‚îÇ    ‚îÇ   ‚îÇ   ‚îî‚îÄ SupportDirectory.js
‚îÇ    ‚îÇ   ‚îú‚îÄ utils/
‚îÇ    ‚îÇ   ‚îÇ   ‚îî‚îÄ fheUtils.js
‚îÇ    ‚îÇ   ‚îî‚îÄ App.js
‚îÇ    ‚îú‚îÄ package.json
‚îÇ    ‚îî‚îÄ vite.config.js
‚îÇ
‚îú‚îÄ hardhat.config.js
‚îú‚îÄ package.json
‚îî‚îÄ .env
```

---

## 3Ô∏è‚É£ Prompts para Claude Code

### üîπ Prompt 1 ‚Äî Setup Lisk + Zama
```text
Crea proyecto usando Scaffold-Lisk + Zama FHEVM:

1. Setup inicial:
   npx create-scaffold-lisk@latest loudao-hybrid

2. Instalar dependencias Zama:
   npm install fhevm fhevmjs

3. Configurar .env:
   DEPLOYER_PRIVATE_KEY=your_key
   LISK_SEPOLIA_RPC=https://sepolia-rpc.lisk.com
   NEXT_PUBLIC_CHAIN_ID=4202

4. Configurar hardhat.config.js para Lisk Sepolia:
   networks: {
     liskSepolia: {
       url: process.env.LISK_SEPOLIA_RPC,
       chainId: 4202,
       accounts: [process.env.DEPLOYER_PRIVATE_KEY]
     }
   }

5. Package.json dependencies:
   - fhevm: "^0.4.0"
   - fhevmjs: "^0.4.0" 
   - @nomicfoundation/hardhat-toolbox: "^4.0.0"
   - ethers: "^6.8.0"
```

### üîπ Prompt 2 ‚Äî Smart Contract H√≠brido con Zama FHE

```text
Crear contracts/LouDaoHybrid.sol:

Importaciones:
import "fhevm/lib/TFHE.sol";

Structs:
1. PublicReport (visible en tendedero):
   - string agresor
   - string institucion  
   - string descripcionGeneral
   - uint256 year
   - uint256 timestamp
   - uint256 reportId

2. PrivateData (cifrado con FHE):
   - euint32 victimAge (edad para estad√≠sticas)
   - euint8 relationshipType (0-5: desconocido, pareja, jefe, etc)
   - euint8 violenceType (tipo espec√≠fico de violencia)
   - euint8 urgencyLevel (nivel de peligro 1-5)
   - bytes32 reporterHash (anonimato)

Funciones principales:
1. submitReport() - datos p√∫blicos + cifrados
2. getAllPublicReports() - para tendedero  
3. getAgresorReportCount() - pattern matching
4. getPrivateStatistics() - estad√≠sticas FHE
5. findRelevantSupport() - recomendaciones

Variables FHE para estad√≠sticas:
- euint32 totalAge (suma cifrada)
- euint32 ageCount (contador cifrado)

Mapping para pattern matching:
- mapping(string => uint256[]) reportsByAgresor

Eventos:
- ReportSubmitted (datos p√∫blicos)
- PatternMatched (cuando agresor tiene m√∫ltiples denuncias)

ID √∫nico: keccak256(reportCounter, block.timestamp, msg.sender)
```

### üîπ Prompt 3 ‚Äî SupportDirectory Simple

```text
Crear contracts/SupportDirectory.sol:

Struct SupportOrganization:
- string name
- string city
- string contact  
- string orgType ("ong", "refugio", "legal", "psicologico", "medico")
- bool active

Funciones:
- addSupportOrg() onlyOwner
- getSupportOrgs() public view
- getSupportOrgsByType() public view

Pre-cargar organizaciones reales de M√©xico:
1. "CAVI CDMX" - "Ciudad de M√©xico" - "555-533-5533" - "gobierno"
2. "Red Nacional de Refugios" - "Nacional" - "01-800-822-4460" - "refugio"
3. "LOCATEL Emergencias" - "Ciudad de M√©xico" - "56-58-1111" - "emergencia"
4. "Instituto Nacional de las Mujeres" - "Nacional" - "01-800-911-2511" - "gobierno"

Solo owner puede gestionar organizaciones.
```

### üîπ Prompt 4 ‚Äî Deploy Scripts para Lisk

```text
Crear scripts de deploy:

scripts/deployHybrid.js:
- Deploy LouDaoHybrid.sol en Lisk Sepolia
- Configurar permisos iniciales FHE 
- Guardar address en deployments.json
- Console.log address y gas usado
- Verificar contrato en Lisk explorer

scripts/deploySupport.js:  
- Deploy SupportDirectory.sol
- Agregar organizaciones iniciales mexicanas
- Conectar con contrato principal si necesario

Comandos:
npx hardhat run scripts/deployHybrid.js --network liskSepolia
npx hardhat run scripts/deploySupport.js --network liskSepolia

Verificaci√≥n:
npx hardhat verify --network liskSepolia <address>
```

### üîπ Prompt 5 ‚Äî Frontend con fhevmjs Integration

```text
Crear frontend React con cifrado FHE:

Componente ReportForm.js:
- Form con campos p√∫blicos: agresor, instituci√≥n, descripci√≥n, a√±o
- Form con campos privados: edad, relaci√≥n, tipo violencia, urgencia
- Cifrar datos privados con fhevmjs antes de enviar
- Mostrar loading durante cifrado
- Validaci√≥n de inputs

Componente PublicTendedero.js:  
- Grid de cards mostrando TODAS las denuncias p√∫blicas
- Cada card: agresor, instituci√≥n, descripci√≥n, a√±o, fecha
- Filtros por a√±o, instituci√≥n
- Search box para buscar agresores
- Mostrar "‚ö†Ô∏è X denuncias m√°s" si hay pattern matching

Componente PrivateAnalytics.js:
- Estad√≠sticas agregadas sin revelar datos individuales
- "Edad promedio: X a√±os" (calculado con FHE)
- "Tipo de violencia m√°s com√∫n: X"
- Charts b√°sicos con data agregada

Utils fheUtils.js:
- Funciones para inicializar fhevmjs
- Cifrar inputs antes de enviar a contrato
- Manejar errores de cifrado

Integraci√≥n con Lisk:
- Provider para Lisk Sepolia
- Auto-switch de red si no est√° en Lisk
- Conexi√≥n MetaMask
- Handle de transacciones y confirmaciones
```

### üîπ Prompt 6 ‚Äî Pattern Matching y Analytics

```text
Implementar funcionalidades inteligentes:

Pattern Matching Autom√°tico:
- Detectar autom√°ticamente m√∫ltiples denuncias del mismo agresor
- Mostrar alerta: "Este agresor tiene X denuncias adicionales"
- No revelar identidades de otras v√≠ctimas
- Visual indicator en el tendedero

Estad√≠sticas Privadas con FHE:
- Calcular promedios de edad sin revelar edades espec√≠ficas
- An√°lisis de tipos de violencia m√°s comunes
- Estad√≠sticas por instituci√≥n sin identificar v√≠ctimas
- Usar TFHE.add(), TFHE.div() para c√°lculos cifrados

Recomendaciones Inteligentes:
- Basado en tipo de violencia cifrado ‚Üí recomendar servicios espec√≠ficos
- Basado en urgencia cifrada ‚Üí priorizar contactos de emergencia
- Basado en ubicaci√≥n ‚Üí mostrar organizaciones locales primero

Validaci√≥n Comunitaria:
- Permitir votos an√≥nimos sobre credibilidad usando FHE
- Sistema de scoring sin revelar qui√©n vota qu√©
- Threshold para marcar reportes como "verificados por comunidad"
```

### üîπ Prompt 7 ‚Äî UI/UX del Tendedero

```text
Dise√±ar interfaz estilo "tendedero de ropa":

Layout Principal:
- Header con stats agregadas: "X denuncias totales, Y agresores √∫nicos"  
- Filtros: a√±o, tipo de instituci√≥n, b√∫squeda por nombre
- Grid responsive de "cards colgadas" como ropa en tendedero

Card Design para cada denuncia:
- Visual como "papel colgado con pinza"
- Agresor (destacado)
- Instituci√≥n
- Descripci√≥n (truncada con "ver m√°s")
- A√±o y fecha
- Badge "‚ö†Ô∏è X m√°s denuncias" si pattern matching detecta repetici√≥n

Colores y tema:
- P√∫rpura/violeta como color primario (tema feminista)
- Cards en tonos pasteles pero legibles
- Hover effects sutiles
- Dise√±o emp√°tico pero no victimizante

Interactividad:
- Click en card abre modal con detalles completos
- Bot√≥n "Conectar con apoyo" ‚Üí muestra organizaciones relevantes
- Share button para compartir denuncia espec√≠fica
- Animaciones sutiles al cargar nuevas denuncias
```

### üîπ Prompt 8 ‚Äî Tests y Validaci√≥n

```text
Crear tests para validar funcionalidad:

test/LouDaoHybrid.test.js:
- Test submitReport con datos p√∫blicos + cifrados
- Verificar getAllPublicReports devuelve datos correctos
- Test pattern matching (m√∫ltiples reportes mismo agresor)
- Test estad√≠sticas FHE (totalAge, ageCount)
- Mock fhevm para tests locales r√°pidos

test/integration.test.js:
- Test flujo completo: env√≠o ‚Üí pattern detection ‚Üí analytics
- Test recomendaciones de apoyo
- Test validaci√≥n comunitaria

Frontend testing:
- Test cifrado con fhevmjs
- Test conexi√≥n a Lisk Sepolia
- Test UI components rendering
- Test filtros y b√∫squeda

Setup para testing:
- Usar hardhat network local con fhevm mock
- Datos de prueba realistas pero ficticios
- Evitar loops pesados en tests para Replit
```

### üîπ Prompt 9 ‚Äî Demo Completo y Deploy

```text
Preparar demo funcional para hackathon:

Flow de demo:
1. Abrir app ‚Üí mostrar tendedero con denuncias pre-existentes
2. Mostrar analytics privadas: "Datos de X denuncias procesados"
3. Conectar wallet a Lisk Sepolia
4. Llenar formulario completo (datos p√∫blicos + privados)
5. Mostrar proceso de cifrado FHE en tiempo real
6. Submit ‚Üí confirmar en blockchain
7. Ver nueva denuncia aparecer en tendedero
8. Demostrar pattern matching si agresor repetido
9. Mostrar recomendaciones de apoyo inteligentes
10. Explicar privacidad: datos p√∫blicos vs an√°lisis privado

Deploy production:
1. Deploy contratos a Lisk Sepolia
2. Verificar en Lisk explorer  
3. Deploy frontend a Vercel/Netlify
4. Configurar ENVs de producci√≥n
5. Pre-cargar datos de organizaciones mexicanas reales
6. Wallet con Lisk Sepolia ETH para gas

Datos demo:
- 3-5 denuncias pre-cargadas para mostrar tendedero
- 1-2 con mismo agresor para pattern matching
- Organizaciones reales de apoyo en M√©xico
- No usar datos reales de v√≠ctimas

Presentaci√≥n:
- Explicar modelo h√≠brido: transparencia + privacidad inteligente  
- Demostrar valor de FHE para an√°lisis sin exposici√≥n
- Mostrar impacto social inmediato
- Roadmap: moderaci√≥n, verificaci√≥n, expansi√≥n
```

---

## 4Ô∏è‚É£ Configuraci√≥n T√©cnica

### Hardhat Config Completo
```javascript
require("@nomicfoundation/hardhat-toolbox");
require('dotenv').config();

module.exports = {
  solidity: {
    version: "0.8.24",
    settings: {
      optimizer: {
        enabled: true,
        runs: 200
      }
    }
  },
  networks: {
    liskSepolia: {
      url: process.env.LISK_SEPOLIA_RPC || "https://sepolia-rpc.lisk.com",
      chainId: 4202,
      accounts: process.env.DEPLOYER_PRIVATE_KEY ? [process.env.DEPLOYER_PRIVATE_KEY] : []
    }
  },
  etherscan: {
    apiKey: {
      liskSepolia: "abc"
    },
    customChains: [
      {
        network: "liskSepolia",
        chainId: 4202,
        urls: {
          apiURL: "https://sepolia-blockscout.lisk.com/api",
          browserURL: "https://sepolia-blockscout.lisk.com/"
        }
      }
    ]
  }
};
```

### Package.json Dependencies
```json
{
  "dependencies": {
    "fhevm": "^0.4.0",
    "fhevmjs": "^0.4.0", 
    "@nomicfoundation/hardhat-toolbox": "^4.0.0",
    "ethers": "^6.8.0",
    "hardhat": "^2.19.0",
    "react": "^18.2.0",
    "vite": "^4.4.5"
  }
}
```

---

## 5Ô∏è‚É£ Modelo de Datos Final

### Datos P√∫blicos (Tendedero):
- ‚úÖ Nombre del agresor
- ‚úÖ Instituci√≥n donde ocurri√≥
- ‚úÖ Descripci√≥n general del incidente  
- ‚úÖ A√±o del incidente
- ‚úÖ Fecha del reporte

### Datos Privados Cifrados (Analytics):
- üîí Edad de la v√≠ctima (para estad√≠sticas demogr√°ficas)
- üîí Relaci√≥n con agresor (para an√°lisis de patrones)
- üîí Tipo espec√≠fico de violencia (para recomendaciones)  
- üîí Nivel de urgencia (para priorizar apoyo)
- üîí Hash del reportante (anonimato absoluto)

### An√°lisis Inteligente Generado:
- üìä Estad√≠sticas demogr√°ficas agregadas
- üîç Pattern matching por agresor
- üéØ Recomendaciones personalizadas de apoyo
- ‚úÖ Validaci√≥n comunitaria an√≥nima

---

## 6Ô∏è‚É£ Valor T√©cnico Real de Zama FHE

**Sin FHE (problema):** 
- Datos sensibles expuestos o no recolectados
- An√°lisis limitado por privacidad
- Sin insights demogr√°ficos √∫tiles

**Con FHE (soluci√≥n):**
- ‚úÖ Recolecci√≥n de datos sensibles de forma segura
- ‚úÖ An√°lisis estad√≠stico sin comprometer privacidad individual  
- ‚úÖ Pattern matching inteligente manteniendo anonimato
- ‚úÖ Recomendaciones personalizadas sin exposici√≥n de datos

---

‚úÖ **Plan h√≠brido completo**: Impacto social inmediato (tendedero p√∫blico) + an√°lisis inteligente privado (Zama FHE) en Lisk Sepolia, deployable y funcional para hackathon.
